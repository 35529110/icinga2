Installing Icinga 2
===================

The recommended way of installing Icinga 2 is to use packages. The Icinga
project provides both release and development packages for a number
of operating systems.

Please check the documentation in the doc/ directory for a current list
of available packages and detailed installation instructions.

There are a number of known caveats when installing from source such as
incorrect directory and file permissions. So even if you're planning to
not use the official packages it is advisable to build your own Debian
or RPM packages.

Build Requirements
------------------

The following requirements need to be fulfilled in order to build the
application using a dist tarball (package names for RHEL and Debian in
parentheses):

* cmake
* GNU make (make)
* C++ compiler (gcc-c++ on RHEL, build-essential on Debian)
* OpenSSL library and header files (openssl-devel on RHEL, libssl-dev
                                    on Debian)
* Boost library and header files (boost-devel on RHEL, libboost-all-dev
                                  on Debian)
* GNU bison (bison)
* GNU flex (flex) >= 2.5.35
* recommended: libexecinfo on FreeBSD
* optional: Doxygen (doxygen)
* optional: MySQL (mysql-devel on RHEL, libmysqlclient-dev on Debian)
* optional: Python (python-devel on RHEL, python-dev on Debian)

Note: RHEL5 ships an ancient flex version. Updated packages are available for
example from the repoforge buildtools repository.

http://mirror.hs-esslingen.de/repoforge/redhat/el5/en/{i386,x86_64}/buildtools/

User Requirements
-----------------

By default Icinga will run as user 'icinga' and group 'icinga'. Additionally the
external command pipe and livestatus features require a dedicated command group
'icingacmd'. You can choose your own user/group names and pass them to the
configure script using the --with-icinga-user, --with-icinga-group,
--with-icingacmd-user and --with-icingacmd-group options.

# groupadd icinga
# groupadd icingacmd
# useradd -c "icinga" -s /sbin/nologin -G icingacmd -g icinga icinga

Add the web server user to the icingacmd group in order to grant it write
permissions to the external command pipe and livestatus socket:

# usermod -a -G icingacmd www-data

Make sure to replace "www-data" with the name of the user your web server
is running as.

Building Release Tarballs
-------------------------

In order to build a release tarball you should first check out the Git repository
in a new directory. If you're using an existing check-out you should make sure
that there are no local modifications:

$ git status

The CPack tool will package _all_ files in the source directory.

Next you'll have to create a separate build directory that is not inside
the source directory. If you fail to do this CPack will try to include the
build directory in the tarball.

$ cd ..
$ mkdir icinga2-release && cd icinga2-release
$ cmake ../icinga2 -DCPACK_SOURCE_GENERATE=TGZ -DCPACK_SOURCE_PACKAGE_FILE_NAME=icinga2-0.0.10
$ make package_source

Update the package name to reflect the version of the tarball you're creating.

Finally you should verify that the tarball only contains the files it should contain:

$ tar ztf icinga2-0.0.10.tar.gz | less

Building Icinga 2
-----------------

Once you have installed all the necessary build requirements you can build
Icinga 2 using the following commands:

$ mkdir build && cd build
$ cmake ..
$ make
$ make install

You can specify an alternative installation prefix using -DCMAKE_INSTALL_PREFIX:

$ cmake .. -DCMAKE_INSTALL_PREFIX=/tmp/icinga2

In addition to CMAKE_INSTALL_PREFIX the following Icinga-specific cmake
variables are supported:

- ICINGA2_USER: The user Icinga 2 should run as; defaults to "icinga"
- ICINGA2_GROUP: The group Icinga 2 should run as; defaults to "icinga"
- ICINGA2_COMMAND_USER: The command user Icinga 2 should use; defaults to "icinga"
- ICINGA2_COMMAND_GROUP: The command group Icinga 2 should use; default to "icingacmd"
- CMAKE_INSTALL_SYSCONFDIR: The configuration directory; defaults to CMAKE_INSTALL_PREFIX/etc
- CMAKE_INSTALL_LOCALSTATEDIR: The state directory; defaults to CMAKE_INSTALL_PREFIX/var

Running Icinga 2
----------------

Icinga 2 comes with a single binary that takes care of loading all the relevant
components (e.g. for check execution, notifications, etc.):

# /usr/bin/icinga2
[2013-10-22 13:06:22 +0200] <Main Thread> information/icinga-app: Icinga application loader (version: 0.0.3, git branch master, commit 07d9a59f + changes)
[2013-10-22 13:06:22 +0200] <Main Thread> information/base: Adding library search dir: /usr/lib/icinga2
[2013-10-22 13:06:22 +0200] <Main Thread> information/base: Loading library 'libicinga.la'
[2013-10-22 13:06:22 +0200] <Main Thread> information/config: Adding include search dir: /usr/share/icinga2
[2013-10-22 13:06:22 +0200] <Main Thread> critical/icinga-app: You need to specify at least one config file (using the --config option).

Icinga 2 can be started as daemon using the provided init script:

# /etc/init.d/icinga2
Usage: /etc/init.d/icinga2 {start|stop|restart|reload|checkconfig|status}

Icinga 2 reads a single configuration file which is used to specify all
configuration settings (global settings, hosts, services, etc.). The
configuration format is explained in detail in the doc/ directory.

By default "make install" installs example configuration files in
/usr/local/etc/icinga2 unless you have specified a different prefix or
sysconfdir.


Package Builds
--------------

In order to create a snapshot tarball, create a new release directory outside
the source tree and run cmake and make. Replace <version> with the correct
string.

$ cd ..
$ mkdir icinga2-release && cd icinga2-release
$ cmake ../icinga2 -DCPACK_SOURCE_GENERATE=TGZ -DCPACK_SOURCE_PACKAGE_FILE_NAME=icinga2-<version>
$ make package_source
