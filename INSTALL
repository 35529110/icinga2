Installing Icinga 2
===================

Please note that the current version of Icinga 2 isn't much more than a tech
demo. Expect some rough edges when installing and running Icinga 2.

For the "finished" version we're planning to release packages for the most
common Linux distributions as well as for Windows - or at least co-operate
with the package maintainers.

Build Requirements
------------------

The following requirements need to be fulfilled in order to build the
application using a dist tarball (package names for RHEL and Debian in
parenthesis):

* GNU make (make)
* C++ compiler (gcc-c++ on RHEL, build-essential on Debian)
* OpenSSL library and header files (openssl-devel on RHEL, libssl-dev
                                    on Debian)
* Boost library and header files (boost-devel on RHEL, libboost-all-dev
                                  on Debian)
* optional: Doxygen (doxygen)

Packaging Requirements
----------------------

In order to build a dist tarball for the application the following external
software components need to be installed in addition to the build requirements
mentioned above:

* GNU Automake (automake)
* GNU Autoconf (autoconf)
* GNU Libtool (libtool and libtool-ltdl-devel on RHEL, libtool and
               libltdl-dev on Debian)
* GNU bison (bison)
* GNU flex (flex)

Debian Packages
---------------

This program comes with its own Debian packaging scripts which may or may not
fully comply with the official Debian packaging requirements. These scripts can
be found in the 'debian' sub-directory. Binary packages can be built using
'dpkg-buildpackage'.

Building Icinga 2
-----------------

Once you have installed all the necessary build requirements you can build
Icinga 2 using the following commands:

$ ./configure
$ make
$ make install

The configure script supports all the usual parameters one comes to expect
from autoconf. In particular you may want to use --prefix to specify an
alternative installation prefix.

Note: The Git repository does not contain any auto-generated Autotools files,
i.e. there is no 'configure' script. In this case you will need to regenerate
the 'configure' script by running 'autogen.sh'. However, as an end-user you
should reconsider whether you really want to use the code from the Git
repository. In general it is advisable to use one of the dist tarballs instead.

Running Icinga 2
----------------

Icinga 2 comes with a single binary that takes care of loading all the relevant
components (e.g. for check execution, notifications, etc.):

$ /tmp/i2/bin/icinga
[2012/09/14 10:36:12] information/icinga: Icinga application loader (version:
                      2.0, git branch master, commit 8e4bdf38 + changes)
[2012/09/14 10:36:12] information/base: Syntax: ./bin/icinga -c <config-file> ...

Icinga 2 reads a single configuration file which is used to specify all
configuration settings (global settings, hosts, services, etc.). The
configuration format is explained in detail in the docs/icinga2-config.txt
file.

By default "make install" installs example configuration files to /etc/icinga2
unless you have specified a different prefix or sysconfdir.
